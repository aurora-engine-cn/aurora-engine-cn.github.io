import{_ as a,c as e,o,N as t}from"./chunks/framework.cff67d0c.js";const m=JSON.parse('{"title":"数据响应","description":"","frontmatter":{},"headers":[],"relativePath":"router/response.md"}'),r={name:"router/response.md"},d=t('<h1 id="数据响应" tabindex="-1">数据响应 <a class="header-anchor" href="#数据响应" aria-label="Permalink to &quot;数据响应&quot;">​</a></h1><p><code>aurora</code> 接口处理器中的数据响应通过返回值的方式直接处理，仅在中间件阶段处理数据响应需要调用方法设定，返回的数据统一格式化成为<code>json</code>数据</p><h2 id="字符串数据" tabindex="-1">字符串数据 <a class="header-anchor" href="#字符串数据" aria-label="Permalink to &quot;字符串数据&quot;">​</a></h2><p>对三种字符串数据有着不同的解析，普通字符串，静态资源响应字符串，服务转发字符串。</p><h3 id="普通字符串" tabindex="-1">普通字符串 <a class="header-anchor" href="#普通字符串" aria-label="Permalink to &quot;普通字符串&quot;">​</a></h3><p>上面提到过说有的数据都统一为<code>json</code>数据，纯普通字符串的处理并不会被二次处理，而是作为字符串直接写入到响应，设计的目的是可以让用户的操作性更加广泛得以支持多种数据格式的传输，传输数据前定义需要响应的类型头即可。</p><h3 id="html-响应" tabindex="-1">Html 响应 <a class="header-anchor" href="#html-响应" aria-label="Permalink to &quot;Html 响应&quot;">​</a></h3><p><code>aurora</code> 中支持对浏览器响应html页面(静态资源下的html文件),对html的响应是通过静态资源全路径来实现</p><h3 id="服务转发" tabindex="-1">服务转发 <a class="header-anchor" href="#服务转发" aria-label="Permalink to &quot;服务转发&quot;">​</a></h3><p>服务转发的操作格式<code>&quot;forward:xxx/xx/x&quot;</code>,返回字符串使用 <code>forward:</code> 加上服务路径即可完成请求转发</p><h2 id="结其他数据" tabindex="-1">结其他数据 <a class="header-anchor" href="#结其他数据" aria-label="Permalink to &quot;结其他数据&quot;">​</a></h2><p>自定义结构体，any 或者 map，切片等数据将统一处理为json格式。</p>',12),c=[d];function n(s,h,l,i,p,_){return o(),e("div",null,c)}const f=a(r,[["render",n]]);export{m as __pageData,f as default};
